//-------------------------------------------//
// クマのチェスエンジン
// (c) 2022 kato daichi
//-------------------------------------------//
#pragma once
#include <cstdint>
//-------------------------------------------//
struct s_magic
{
	uint64_t magic;
	uint64_t mask;
	uint64_t* ptr;
	unsigned shift;
	[[nodiscard]] unsigned index(const uint64_t occ) const
	{
		return static_cast<unsigned>((occ & mask) * magic >> shift);
	}
};
//-------------------------------------------//
inline const uint64_t rank_attacks[512] = {
	0xfe, 0xfd, 0xfb, 0xf7, 0xef, 0xdf, 0xbf, 0x7f, 0x2, 0xfd, 0xfa, 0xf6, 0xee, 0xde, 0xbe, 0x7e, 0x6, 0x5, 0xfb, 0xf4, 0xec, 0xdc, 0xbc, 0x7c,
	0x2, 0x5, 0xfa, 0xf4, 0xec, 0xdc, 0xbc, 0x7c, 0xe, 0xd, 0xb, 0xf7, 0xe8, 0xd8, 0xb8, 0x78, 0x2, 0xd, 0xa, 0xf6, 0xe8, 0xd8, 0xb8, 0x78, 0x6,
	0x5, 0xb, 0xf4, 0xe8, 0xd8, 0xb8, 0x78, 0x2, 0x5, 0xa, 0xf4, 0xe8, 0xd8, 0xb8, 0x78, 0x1e, 0x1d, 0x1b, 0x17, 0xef, 0xd0, 0xb0, 0x70, 0x2,
	0x1d, 0x1a, 0x16, 0xee, 0xd0, 0xb0, 0x70, 0x6, 0x5, 0x1b, 0x14, 0xec, 0xd0, 0xb0, 0x70, 0x2, 0x5, 0x1a, 0x14, 0xec, 0xd0, 0xb0, 0x70, 0xe,
	0xd, 0xb, 0x17, 0xe8, 0xd0, 0xb0, 0x70, 0x2, 0xd, 0xa, 0x16, 0xe8, 0xd0, 0xb0, 0x70, 0x6, 0x5, 0xb, 0x14, 0xe8, 0xd0, 0xb0, 0x70, 0x2, 0x5,
	0xa, 0x14, 0xe8, 0xd0, 0xb0, 0x70, 0x3e, 0x3d, 0x3b, 0x37, 0x2f, 0xdf, 0xa0, 0x60, 0x2, 0x3d, 0x3a, 0x36, 0x2e, 0xde, 0xa0, 0x60, 0x6, 0x5,
	0x3b, 0x34, 0x2c, 0xdc, 0xa0, 0x60, 0x2, 0x5, 0x3a, 0x34, 0x2c, 0xdc, 0xa0, 0x60, 0xe, 0xd, 0xb, 0x37, 0x28, 0xd8, 0xa0, 0x60, 0x2, 0xd, 0xa,
	0x36, 0x28, 0xd8, 0xa0, 0x60, 0x6, 0x5, 0xb, 0x34, 0x28, 0xd8, 0xa0, 0x60, 0x2, 0x5, 0xa, 0x34, 0x28, 0xd8, 0xa0, 0x60, 0x1e, 0x1d, 0x1b, 0x17,
	0x2f, 0xd0, 0xa0, 0x60, 0x2, 0x1d, 0x1a, 0x16, 0x2e, 0xd0, 0xa0, 0x60, 0x6, 0x5, 0x1b, 0x14, 0x2c, 0xd0, 0xa0, 0x60, 0x2, 0x5, 0x1a, 0x14, 0x2c,
	0xd0, 0xa0, 0x60, 0xe, 0xd, 0xb, 0x17, 0x28, 0xd0, 0xa0, 0x60, 0x2, 0xd, 0xa, 0x16, 0x28, 0xd0, 0xa0, 0x60, 0x6, 0x5, 0xb, 0x14, 0x28, 0xd0,
	0xa0, 0x60, 0x2, 0x5, 0xa, 0x14, 0x28, 0xd0, 0xa0, 0x60, 0x7e, 0x7d, 0x7b, 0x77, 0x6f, 0x5f, 0xbf, 0x40, 0x2, 0x7d, 0x7a, 0x76, 0x6e, 0x5e, 0xbe,
	0x40, 0x6, 0x5, 0x7b, 0x74, 0x6c, 0x5c, 0xbc, 0x40, 0x2, 0x5, 0x7a, 0x74, 0x6c, 0x5c, 0xbc, 0x40, 0xe, 0xd, 0xb, 0x77, 0x68, 0x58, 0xb8, 0x40,
	0x2, 0xd, 0xa, 0x76, 0x68, 0x58, 0xb8, 0x40, 0x6, 0x5, 0xb, 0x74, 0x68, 0x58, 0xb8, 0x40, 0x2, 0x5, 0xa, 0x74, 0x68, 0x58, 0xb8, 0x40, 0x1e, 0x1d,
	0x1b, 0x17, 0x6f, 0x50, 0xb0, 0x40, 0x2, 0x1d, 0x1a, 0x16, 0x6e, 0x50, 0xb0, 0x40, 0x6, 0x5, 0x1b, 0x14, 0x6c, 0x50, 0xb0, 0x40, 0x2, 0x5, 0x1a,
	0x14, 0x6c, 0x50, 0xb0, 0x40, 0xe, 0xd, 0xb, 0x17, 0x68, 0x50, 0xb0, 0x40, 0x2, 0xd, 0xa, 0x16, 0x68, 0x50, 0xb0, 0x40, 0x6, 0x5, 0xb, 0x14, 0x68,
	0x50, 0xb0, 0x40, 0x2, 0x5, 0xa, 0x14, 0x68, 0x50, 0xb0, 0x40, 0x3e, 0x3d, 0x3b, 0x37, 0x2f, 0x5f, 0xa0, 0x40, 0x2, 0x3d, 0x3a, 0x36, 0x2e, 0x5e,
	0xa0, 0x40, 0x6, 0x5, 0x3b, 0x34, 0x2c, 0x5c, 0xa0, 0x40, 0x2, 0x5, 0x3a, 0x34, 0x2c, 0x5c, 0xa0, 0x40, 0xe, 0xd, 0xb, 0x37, 0x28, 0x58, 0xa0, 0x40,
	0x2, 0xd, 0xa, 0x36, 0x28, 0x58, 0xa0, 0x40, 0x6, 0x5, 0xb, 0x34, 0x28, 0x58, 0xa0, 0x40, 0x2, 0x5, 0xa, 0x34, 0x28, 0x58, 0xa0, 0x40, 0x1e, 0x1d,
	0x1b, 0x17, 0x2f, 0x50, 0xa0, 0x40, 0x2, 0x1d, 0x1a, 0x16, 0x2e, 0x50, 0xa0, 0x40, 0x6, 0x5, 0x1b, 0x14, 0x2c, 0x50, 0xa0, 0x40, 0x2, 0x5, 0x1a,
	0x14, 0x2c, 0x50, 0xa0, 0x40, 0xe, 0xd, 0xb, 0x17, 0x28, 0x50, 0xa0, 0x40, 0x2, 0xd, 0xa, 0x16, 0x28, 0x50, 0xa0, 0x40, 0x6, 0x5, 0xb, 0x14, 0x28,
	0x50, 0xa0, 0x40, 0x2, 0x5, 0xa, 0x14, 0x28, 0x50, 0xa0, 0x40
};
//-------------------------------------------//
uint64_t bishop_attacks_slow(uint64_t occ, int sq);
uint64_t flip_vertical(uint64_t x);
uint64_t rankattacks(uint64_t occ, int sq);
uint64_t rook_attacks_slow(uint64_t occ, int sq);
uint64_t sliding_attacks_slow(uint64_t occ, int sq, const uint64_t* masks, uint64_t(*func)(uint64_t));
void init_magics(uint64_t attack_table[], s_magic magics[], const uint64_t* masks, uint64_t(*func)(uint64_t, int), const uint64_t* magic_numbers);
