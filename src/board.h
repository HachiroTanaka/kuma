//-------------------------------------------//
// クマのチェスエンジン
// (c) 2022 kato daichi
//-------------------------------------------//
#pragma once
#include <cstdint>
#include "magic.h"
//-------------------------------------------//
constexpr uint64_t rook_magics[] = {
	0x0a80004000801220, 0x8040004010002008, 0x2080200010008008, 0x1100100008210004, 0xc200209084020008, 0x2100010004000208, 0x0400081000822421, 0x0200010422048844,
	0x0800800080400024, 0x0001402000401000, 0x3000801000802001, 0x4400800800100083, 0x0904802402480080, 0x4040800400020080, 0x0018808042000100, 0x4040800080004100,
	0x0040048001458024, 0x00a0004000205000, 0x3100808010002000, 0x4825010010000820, 0x5004808008000401, 0x2024818004000a00, 0x0005808002000100, 0x2100060004806104,
	0x0080400880008421, 0x4062220600410280, 0x010a004a00108022, 0x0000100080080080, 0x0021000500080010, 0x0044000202001008, 0x0000100400080102, 0xc020128200040545,
	0x0080002000400040, 0x0000804000802004, 0x0000120022004080, 0x010a386103001001, 0x9010080080800400, 0x8440020080800400, 0x0004228824001001, 0x000000490a000084,
	0x0080002000504000, 0x200020005000c000, 0x0012088020420010, 0x0010010080080800, 0x0085001008010004, 0x0002000204008080, 0x0040413002040008, 0x0000304081020004,
	0x0080204000800080, 0x3008804000290100, 0x1010100080200080, 0x2008100208028080, 0x5000850800910100, 0x8402019004680200, 0x0120911028020400, 0x0000008044010200,
	0x0020850200244012, 0x0020850200244012, 0x0000102001040841, 0x140900040a100021, 0x000200282410a102, 0x000200282410a102, 0x000200282410a102, 0x4048240043802106
};
//-------------------------------------------//
constexpr uint64_t bishop_magics[] = {
	0x40106000a1160020, 0x0020010250810120, 0x2010010220280081, 0x002806004050c040, 0x0002021018000000, 0x2001112010000400, 0x0881010120218080, 0x1030820110010500,
	0x0000120222042400, 0x2000020404040044, 0x8000480094208000, 0x0003422a02000001, 0x000a220210100040, 0x8004820202226000, 0x0018234854100800, 0x0100004042101040,
	0x0004001004082820, 0x0010000810010048, 0x1014004208081300, 0x2080818802044202, 0x0040880c00a00100, 0x0080400200522010, 0x0001000188180b04, 0x0080249202020204,
	0x1004400004100410, 0x00013100a0022206, 0x2148500001040080, 0x4241080011004300, 0x4020848004002000, 0x10101380d1004100, 0x0008004422020284, 0x01010a1041008080,
	0x0808080400082121, 0x0808080400082121, 0x0091128200100c00, 0x0202200802010104, 0x8c0a020200440085, 0x01a0008080b10040, 0x0889520080122800, 0x100902022202010a,
	0x04081a0816002000, 0x0000681208005000, 0x8170840041008802, 0x0a00004200810805, 0x0830404408210100, 0x2602208106006102, 0x1048300680802628, 0x2602208106006102,
	0x0602010120110040, 0x0941010801043000, 0x000040440a210428, 0x0008240020880021, 0x0400002012048200, 0x00ac102001210220, 0x0220021002009900, 0x84440c080a013080,
	0x0001008044200440, 0x0004c04410841000, 0x2000500104011130, 0x1a0c010011c20229, 0x0044800112202200, 0x0434804908100424, 0x0300404822c08200, 0x48081010008a2a80
};
//-------------------------------------------//
inline int mvvlva[14][14];
inline int reductions[2][64][64];
inline int square_distance[64][64];
inline s_magic bishop_tbl[64];
inline s_magic rook_tbl[64];
inline uint64_t antidiag_masks[64];
inline uint64_t battacks[5248];
inline uint64_t between_masks[64][64];
inline uint64_t bishop_masks[64];
inline uint64_t castle_king_walk[4];
inline uint64_t castling_rights[64];
inline uint64_t color_masks[64];
inline uint64_t diag_masks[64];
inline uint64_t distance_rings[64][8];
inline uint64_t ept_helper[64];
inline uint64_t file_masks[64];
inline uint64_t king_ring[64];
inline uint64_t neighbor_masks[64];
inline uint64_t passed_pawn_masks[2][64];
inline uint64_t pawn_2_pushes[2][64];
inline uint64_t pawn_2_pushesfrom[2][64];
inline uint64_t pawn_attacks[2][64];
inline uint64_t pawn_attacks_from[2][64];
inline uint64_t pawn_blocker_masks[2][64];
inline uint64_t pawn_pushes[2][64];
inline uint64_t pawn_pushesfrom[2][64];
inline uint64_t phalanx_masks[64];
inline uint64_t pseudo_attacks[7][64];
inline uint64_t rank_masks[64];
inline uint64_t r_attacks[102400];
inline uint64_t ray_masks[64][64];
inline uint64_t rook_masks[64];
inline uint64_t square_masks[64];
void init_boards();
uint64_t bishop_attacks(uint64_t occ, int sq);
uint64_t rook_attacks(uint64_t occ, int sq);